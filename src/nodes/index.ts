export { ArrayTypeName } from './ArrayTypeName';
export { AssemblyAssignment } from './AssemblyAssignment';
export { AssemblyBlock } from './AssemblyBlock';
export { AssemblyCall } from './AssemblyCall';
export { AssemblyCase } from './AssemblyCase';
export { AssemblyFor } from './AssemblyFor';
export { AssemblyFunctionDefinition } from './AssemblyFunctionDefinition';
export { AssemblyIf } from './AssemblyIf';
export { AssemblyLocalDefinition } from './AssemblyLocalDefinition';
export { AssemblyMemberAccess } from './AssemblyMemberAccess';
export { AssemblyStackAssignment } from './AssemblyStackAssignment';
export { AssemblySwitch } from './AssemblySwitch';
export { BinaryOperation } from './BinaryOperation';
export { Block } from './Block';
export { BooleanLiteral } from './BooleanLiteral';
export { Break } from './Break';
export { BreakStatement } from './BreakStatement';
export { CatchClause } from './CatchClause';
export { Conditional } from './Conditional';
export { Continue } from './Continue';
export { ContinueStatement } from './ContinueStatement';
export { ContractDefinition } from './ContractDefinition';
export { CustomErrorDefinition } from './CustomErrorDefinition';
export { DecimalNumber } from './DecimalNumber';
export { DoWhileStatement } from './DoWhileStatement';
export { ElementaryTypeName } from './ElementaryTypeName';
export { EmitStatement } from './EmitStatement';
export { EnumDefinition } from './EnumDefinition';
export { EnumValue } from './EnumValue';
export { EventDefinition } from './EventDefinition';
export { ExpressionStatement } from './ExpressionStatement';
export { FileLevelConstant } from './FileLevelConstant';
export { ForStatement } from './ForStatement';
export { FunctionCall } from './FunctionCall';
export { FunctionDefinition } from './FunctionDefinition';
export { FunctionTypeName } from './FunctionTypeName';
export { HexLiteral } from './HexLiteral';
export { HexNumber } from './HexNumber';
export { Identifier } from './Identifier';
export { IfStatement } from './IfStatement';
export { ImportDirective } from './ImportDirective';
export { IndexAccess } from './IndexAccess';
export { IndexRangeAccess } from './IndexRangeAccess';
export { InheritanceSpecifier } from './InheritanceSpecifier';
export { InlineAssemblyStatement } from './InlineAssemblyStatement';
export { LabelDefinition } from './LabelDefinition';
export { Mapping } from './Mapping';
export { MemberAccess } from './MemberAccess';
export { ModifierDefinition } from './ModifierDefinition';
export { ModifierInvocation } from './ModifierInvocation';
export { NameValueExpression } from './NameValueExpression';
export { NameValueList } from './NameValueList';
export { NewExpression } from './NewExpression';
export { NumberLiteral } from './NumberLiteral';
export { PragmaDirective } from './PragmaDirective';
export { ReturnStatement } from './ReturnStatement';
export { RevertStatement } from './RevertStatement';
export { SourceUnit } from './SourceUnit';
export { StateVariableDeclaration } from './StateVariableDeclaration';
export { StringLiteral } from './StringLiteral';
export { StructDefinition } from './StructDefinition';
export { ThrowStatement } from './ThrowStatement';
export { TryStatement } from './TryStatement';
export { TupleExpression } from './TupleExpression';
export { TypeDefinition } from './TypeDefinition';
export { UnaryOperation } from './UnaryOperation';
export { UncheckedStatement } from './UncheckedStatement';
export { UserDefinedTypeName } from './UserDefinedTypeName';
export { UsingForDeclaration } from './UsingForDeclaration';
export { VariableDeclaration } from './VariableDeclaration';
export { VariableDeclarationStatement } from './VariableDeclarationStatement';
export { WhileStatement } from './WhileStatement';

import type { NodePrinter } from '../types';

// TODO remove mockPrinter when parser updates
const mockPrinter: NodePrinter = {
  print: ({}) => {
    return '';
  }
};

export const AssemblyFunctionReturns = mockPrinter;
export const SubAssembly = mockPrinter;
